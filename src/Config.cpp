/*
	Copyright 2011 Kacper Kasper

	This file is part of Tank.

    Tank is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Tank is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Tank.  If not, see <http://www.gnu.org/licenses/>.
*/

#include <cstdlib>
#include <cstring>
#include "Config.h"

using namespace std;

CONFIG_ITEM Config::ParseLine(const char *strLine)
{
    char identifier[64];
    char value[64];
    int pos;
    int len;

    len = strlen(strLine);
    pos = (long) strchr(strLine, '=');
    if(pos != NULL)
    {
        pos = pos - (long) strLine + 1;
        strncpy(identifier, strLine, pos - 1);
        identifier[pos - 1] = 0;
        strncpy(value, &strLine[pos], len - pos);
        value[len - pos] = 0;
    }

    CONFIG_ITEM ci;
    strcpy(ci.strIdentifier, identifier);
    strcpy(ci.strValue, value);
    return ci;
}

void Config::ReadFromFile(const char *strFilename)
{
    // Default values
    m_bFullscreen = false;
    m_kP1Controller = KEYBOARD;
    m_kP1Controls.iUp = 273; // up arrow
    m_kP1Controls.iDown = 274; // down arrow
    m_kP1Controls.iLeft = 276; // left arrow
    m_kP1Controls.iRight = 275; // right arrow
    m_kP1Controls.iShoot = 305; // right ctrl
    m_kP2Controller = KEYBOARD;
    m_kP2Controls.iUp = 119; // w
    m_kP2Controls.iDown = 115; // s
    m_kP2Controls.iLeft = 97; // a
    m_kP2Controls.iRight = 100; // d
    m_kP2Controls.iShoot = 113; // q

    ifstream kFile;

    kFile.open(strFilename);
    if(kFile.is_open())
    {
        while(!kFile.eof())
        {
            char line[128];
            
            kFile.getline(line, 128);

            CONFIG_ITEM ci;

            ci = ParseLine(line);

            if(strcmp(ci.strIdentifier, "fullscreen") == 0)
            {
                m_bFullscreen = (bool) atoi(ci.strValue);
            }
            else if(strcmp(ci.strIdentifier, "p1controller") == 0)
            {
                m_kP1Controller = (CONTROLLER) atoi(ci.strValue);
            }
            else if(strcmp(ci.strIdentifier, "p2controller") == 0)
            {
                m_kP2Controller = (CONTROLLER) atoi(ci.strValue);
            }
            else if(strcmp(ci.strIdentifier, "p1up") == 0)
            {
                m_kP1Controls.iUp = atoi(ci.strValue);
            }
            else if(strcmp(ci.strIdentifier, "p1down") == 0)
            {
                m_kP1Controls.iDown = atoi(ci.strValue);
            }
            else if(strcmp(ci.strIdentifier, "p1left") == 0)
            {
                m_kP1Controls.iLeft = atoi(ci.strValue);
            }
            else if(strcmp(ci.strIdentifier, "p1right") == 0)
            {
                m_kP1Controls.iRight = atoi(ci.strValue);
            }
            else if(strcmp(ci.strIdentifier, "p1shoot") == 0)
            {
                m_kP1Controls.iShoot = atoi(ci.strValue);
            }
            else if(strcmp(ci.strIdentifier, "p2up") == 0)
            {
                m_kP2Controls.iUp = atoi(ci.strValue);
            }
            else if(strcmp(ci.strIdentifier, "p2down") == 0)
            {
                m_kP2Controls.iDown = atoi(ci.strValue);
            }
            else if(strcmp(ci.strIdentifier, "p2left") == 0)
            {
                m_kP2Controls.iLeft = atoi(ci.strValue);
            }
            else if(strcmp(ci.strIdentifier, "p2right") == 0)
            {
                m_kP2Controls.iRight = atoi(ci.strValue);
            }
            else if(strcmp(ci.strIdentifier, "p2shoot") == 0)
            {
                m_kP2Controls.iShoot = atoi(ci.strValue);
            }
        }
        kFile.close();
    }
}

void Config::SaveToFile(const char *strFilename)
{
    ofstream kFile;

    kFile.open(strFilename);

    if(kFile.is_open())
    {
        char line[128];
        
        kFile << "#Generated by Tank. DO NOT modify." << endl;
        sprintf(line, "fullscreen=%d", (int) m_bFullscreen);
        kFile << line << endl;
        sprintf(line, "p1controller=%d", (int) m_kP1Controller);
        kFile << line << endl;
        sprintf(line, "p1up=%d", m_kP1Controls.iUp);
        kFile << line << endl;
        sprintf(line, "p1down=%d", m_kP1Controls.iDown);
        kFile << line << endl;
        sprintf(line, "p1left=%d", m_kP1Controls.iLeft);
        kFile << line << endl;
        sprintf(line, "p1right=%d", m_kP1Controls.iRight);
        kFile << line << endl;
        sprintf(line, "p1shoot=%d", m_kP1Controls.iShoot);
        kFile << line << endl;
        sprintf(line, "p2controller=%d", (int) m_kP2Controller);
        kFile << line << endl;
        sprintf(line, "p2up=%d", m_kP2Controls.iUp);
        kFile << line << endl;
        sprintf(line, "p2down=%d", m_kP2Controls.iDown);
        kFile << line << endl;
        sprintf(line, "p2left=%d", m_kP2Controls.iLeft);
        kFile << line << endl;
        sprintf(line, "p2right=%d", m_kP2Controls.iRight);
        kFile << line << endl;
        sprintf(line, "p2shoot=%d", m_kP2Controls.iShoot);
        kFile << line << endl;

        kFile.close();
    }
}